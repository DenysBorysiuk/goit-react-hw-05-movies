{"version":3,"file":"static/js/503.64a49aae.chunk.js","mappings":"0MAGaA,EAAOC,EAAAA,GAAAA,GAAH,4EAMJC,EAAOD,EAAAA,GAAAA,GAAH,wUAeJE,EAAQF,EAAAA,GAAAA,IAAH,uG,SCrBLG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,SAACL,EAAD,UACGK,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OACV,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,kBAAaH,GAArB,WACE,SAACJ,EAAD,WACE,gBACEQ,IAAG,yCAAoCH,GACvCI,IAAKH,OAGT,uBAAIA,QARGF,EADD,KAejB,C,qICrBYM,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAQ1B,OACE,kBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfL,EAAkBI,EAAKE,SAASC,MAAMC,OACtCJ,EAAKK,OACN,EAGC,WACE,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,sBAGL,E,kBCwBD,EAhCe,WAAO,IAAD,EACnB,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOrB,EAAP,KAAesB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMT,EAAK,UAAGQ,EAAaE,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVX,EAAJ,CAEA,IAAMY,EAAS,mCAAG,8GAEOC,EAAAA,EAAAA,IAAYb,GAFnB,OAERhB,EAFQ,OAGdsB,EAAUtB,EAAO8B,SAHH,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDASfJ,GAXwB,CAYzB,GAAE,CAACZ,IAMJ,OACE,6BACE,SAACR,EAAD,CAAWC,kBANW,SAAAwB,GACxBR,EAAgB,CAAET,MAAOiB,GAC1B,KAKG,SAAClC,EAAA,EAAD,CAAYC,OAAQA,MAGzB,C,uKClCKkC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,sCAAyCD,IADjC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,oBAAuCN,IADjC,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfT,EAAW,mCAAG,WAAMb,GAAN,uFACFmB,EAAAA,EAAAA,IAAA,iBAA4B,CACjDM,OAAQ,CACNC,QAASR,EACTlB,MAAOA,KAJc,cACnBqB,EADmB,yBAOlBA,EAASC,MAPS,2CAAH,sDAUXK,EAAe,mCAAG,WAAMH,GAAN,uFACNL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACgBN,IAFV,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/MoviesList/MovieList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchBox/SearchBox.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n// import { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const Item = styled.li`\n  //   width: 300px;\n  transition: transform 500ms;\n  will-change: transform;\n  cursor: pointer;\n  border-radius: 5px;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n  }\n`;\n\nexport const Thumb = styled.div`\n  border-radius: 5px;\n  overflow: hidden;\n  width: 250px;\n  height: 350px;\n`;\n\n// export const Container = styled.div`\n//   max-width: 960px;\n//   margin: 0 auto;\n//   padding: 0 16px;\n// `;\n\n// export const Header = styled.header`\n//   display: flex;\n//   align-items: center;\n//   justify-content: space-between;\n//   gap: 12px;\n//   padding: 8px 0;\n//   margin-bottom: 16px;\n//   border-bottom: 1px solid black;\n\n//   > nav {\n//     display: flex;\n//   }\n// `;\n","import { Link } from 'react-router-dom';\nimport { List, Item, Thumb } from './MovieList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(({ id, poster_path, title }) => (\n        <Item key={id}>\n          <Link to={`/movies/${id}`}>\n            <Thumb>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt={title}\n              />\n            </Thumb>\n            <p>{title}</p>\n          </Link>\n        </Item>\n      ))}\n    </List>\n  );\n};\n","export const SearchBox = ({ updateQueryString }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    updateQueryString(form.elements.query.value);\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"query\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchBox } from 'components/SearchBox/SearchBox';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { searchMovie } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') return;\n\n    const fetchData = async () => {\n      try {\n        const movies = await searchMovie(query);\n        setMovies(movies.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, [query]);\n\n  const updateQueryString = queryString => {\n    setSearchParams({ query: queryString });\n  };\n\n  return (\n    <main>\n      <SearchBox updateQueryString={updateQueryString} />\n      <MoviesList movies={movies} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'b60c32a6f6f2663f6a35c755ff35b4cc';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(`/search/movie/`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["List","styled","Item","Thumb","MoviesList","movies","map","id","poster_path","title","to","src","alt","SearchBox","updateQueryString","onSubmit","e","preventDefault","form","currentTarget","elements","query","value","reset","type","name","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchData","searchMovie","results","console","log","queryString","API_KEY","axios","getTrendingMovies","response","data","getMovieDetails","movieId","params","api_key","getMovieCredits"],"sourceRoot":""}