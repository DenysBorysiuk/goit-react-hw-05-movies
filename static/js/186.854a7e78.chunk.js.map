{"version":3,"file":"static/js/186.854a7e78.chunk.js","mappings":"yNAuCA,UAhCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAS,mCAAG,8GAEaC,EAAAA,EAAAA,IAAgBJ,GAF7B,OAERK,EAFQ,OAGdN,EAAWM,EAAaC,SAHV,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDASfL,GAVoB,CAWrB,GAAE,CAACH,KAEU,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASW,QAAS,GACvB,wBACGX,EAAQY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OAQf,+DAEH,C,+LCnCKG,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAA,sCAAyCD,IADjC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMnB,GAAN,uFACNe,EAAAA,EAAAA,IAAA,iBAAoBf,EAApB,oBAAuCc,IADjC,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfE,EAAW,mCAAG,WAAMC,GAAN,uFACFN,EAAAA,EAAAA,IAAA,iBAA4B,CACjDO,OAAQ,CACNC,QAAST,EACTO,MAAOA,KAJc,cACnBJ,EADmB,yBAOlBA,EAASC,MAPS,2CAAH,sDAUXM,EAAe,mCAAG,WAAMxB,GAAN,uFACNe,EAAAA,EAAAA,IAAA,iBACXf,EADW,4BACgBc,IAFV,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfd,EAAe,mCAAG,WAAMJ,GAAN,uFACNe,EAAAA,EAAAA,IAAA,iBACXf,EADW,4BACgBc,IAFV,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getMovieReviews } from 'services/api';\n\n// import { List, Item, Thumb } from './Cast.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchData = async () => {\n      try {\n        const movieReviews = await getMovieReviews(movieId);\n        setReviews(movieReviews.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return reviews?.length > 0 ? (\n    <ul>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <h2>Author: {author}</h2>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p>We don`t have reviews for this movie</p>\n  );\n};\n\nexport default Reviews;\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst API_KEY = 'b60c32a6f6f2663f6a35c755ff35b4cc';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(`/search/movie/`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","fetchData","getMovieReviews","movieReviews","results","console","log","length","map","id","author","content","API_KEY","axios","getTrendingMovies","response","data","getMovieDetails","searchMovie","query","params","api_key","getMovieCredits"],"sourceRoot":""}